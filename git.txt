Repository Fork : 하나의 큰 컨테이너를 다른 계정으로 복사, Git에 있는 명령이 아님
Git clone : 저장소를 로컬시스템에 복제하는 방법, 지금까지 모든 git Repository의 히스토리가 포함됨

git init : git 최초 초기설정(git 폴더 만들어줌)

스테이징 : 저장소에 커밋될 변경 사항을 준비하는 프로세스를 의미한다.
깃은 변경사항을  추적은하지만 자동으로 저장(save?)하지는 않음 그래서 수정된 파일을 준비 영역에 추가하여 변경 사항 추적 및 저장을 시작하도록 git에 명시적으로 지시해야한다.
→ git add ~ / git add . 하면 전부다
→ .gitignore에 .경로명/ 혹은 폴더명 해주면 거기있는 것들은 스테이징 되지 않는다.(git add . 시)

commit : 로컬시스템에서 파일을 수정/생성/삭제하고 원격 저장소로 업로드. 이때 원격저장소에 반영할 파일들을 선별하는 것이 Commit이다. 즉, 새 커밋을 생성하여 변경 사항을 저장하도록 명시적으로 지시하는것. → 스테이징 영역에 있는걸 스냅샷 떠서 옮기는것

push : 원격 저장소에 업로드하여 다른 사용자와 커밋을 공유하는데 사용, 로컬로 변경 내용을 커밋한 후 git 푸시를 사용하여 변경 내용을 github,lab과 같은 원격 저장소로 보낼 수 있다.

upstream? : 업스트림은 원격 저장소와 로컬 브랜치가 추적하는 브랜치를 의미하고 기본적으로 origin/master 브랜치를 추적함 이것을 변경함으로써, 로컬의 변경점과 적용되는 부분을 컨트롤 할 수 있음


Pull Request
- 당기기 요청, Push 했으니 pull, PR은 저장소에 대한 변경사항을 제안하고 다른 개발자와 협업하는 방법
- PR은 일반적으로 소프트웨어 개발에서 코드 변경을 제안하고 검토하며 저장소의 브랜치를 병합하는데 사용
- PR만들기 : 새로운 브랜치를 만들고 코드를 수정함, 원격 저장소에도 해당 브랜치를 Push
- PR리뷰 : 함께 작업하는 작업자가 해당 PR을 리뷰함, 문제가 될만 한 부분이 있는지를 체크
- PR Merge : Branch를 새로 만드는 것은 새로운 분기가 생기는 것이니 PR Merge를 통해 다시 병합한다. 병합 후 더 이상 필요없는 브랜치는 삭제할 수 있다.
- PR Close : 문제가 있거나, 중복된 경우 또는 더 이상 필요 없는 경우 PR을 닫을 수 있다. PR을 열어둔 상태에서 기존 Branch에 Commit 하면 PR에도 모두 반영된다.
- Draft PR : 아직 리뷰를 받을 상태가 아니라는 것을 알림. 하지만, 내 작업을 Broadcasting 할 수 있음, 공동 작업자에게 내가 무엇을 하고 있는지 보여줄 수 있음. 규모가 큰 작업일 경우 Draft PR을 이용하여 변경점을 지속적으로 공유할 수 있다.
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

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

초급실습정리
1. git init
2. git add main.py 스테이징 (이거 꼭해줘야함 두번째 수정때도)
3. git commit -m "dfdf" 스테이징한걸 commit
4. git remote add 이름 주소 → 이거 다른걸로 하고 싶으면 git checkout -b   이름
ex)git remote add ycctest https://binniechan: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@github.com/binniechan/test-repo.git
5. git pull ycctest main --rebase로 기존 브런치에 있는 파일을 내 로컬로 가져와서 일치시킨다
6. git push -u ycctest master로 upstream 작업을 해준다(이거 안하면 default로 main으로 간다) → 이거 한번하고 나면 고정인듯?
7. git push 마무리

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
Pull Request 실습
1. git checkout -b 이름 : 없던 브랜치일때 -b안붙어 있으면 안됨. 즉 -b를 붙여야 신규생성이됨